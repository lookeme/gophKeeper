// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileManagerService_Login_FullMethodName              = "/pb.FileManagerService/Login"
	FileManagerService_UploadFileByChunks_FullMethodName = "/pb.FileManagerService/UploadFileByChunks"
	FileManagerService_DownloadFile_FullMethodName       = "/pb.FileManagerService/DownloadFile"
	FileManagerService_UploadFile_FullMethodName         = "/pb.FileManagerService/UploadFile"
	FileManagerService_CreateUser_FullMethodName         = "/pb.FileManagerService/CreateUser"
	FileManagerService_ListUserFiles_FullMethodName      = "/pb.FileManagerService/ListUserFiles"
	FileManagerService_SaveCredentials_FullMethodName    = "/pb.FileManagerService/SaveCredentials"
	FileManagerService_GetAllCreds_FullMethodName        = "/pb.FileManagerService/GetAllCreds"
)

// FileManagerServiceClient is the client API for FileManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagerServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	UploadFileByChunks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadStatus], error)
	DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadStatus], error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	ListUserFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserFileResponse, error)
	SaveCredentials(ctx context.Context, in *SaveCredentialsRequest, opts ...grpc.CallOption) (*SaveCredentialsResponse, error)
	GetAllCreds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllCredsResponse, error)
}

type fileManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagerServiceClient(cc grpc.ClientConnInterface) FileManagerServiceClient {
	return &fileManagerServiceClient{cc}
}

func (c *fileManagerServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, FileManagerService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) UploadFileByChunks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileManagerService_ServiceDesc.Streams[0], FileManagerService_UploadFileByChunks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, UploadStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileManagerService_UploadFileByChunksClient = grpc.ClientStreamingClient[FileChunk, UploadStatus]

func (c *fileManagerServiceClient) DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileManagerService_ServiceDesc.Streams[1], FileManagerService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, DownloadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileManagerService_DownloadFileClient = grpc.ServerStreamingClient[DownloadResponse]

func (c *fileManagerServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileManagerService_ServiceDesc.Streams[2], FileManagerService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, UploadStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileManagerService_UploadFileClient = grpc.ClientStreamingClient[FileChunk, UploadStatus]

func (c *fileManagerServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, FileManagerService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) ListUserFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserFileResponse)
	err := c.cc.Invoke(ctx, FileManagerService_ListUserFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) SaveCredentials(ctx context.Context, in *SaveCredentialsRequest, opts ...grpc.CallOption) (*SaveCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveCredentialsResponse)
	err := c.cc.Invoke(ctx, FileManagerService_SaveCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) GetAllCreds(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllCredsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllCredsResponse)
	err := c.cc.Invoke(ctx, FileManagerService_GetAllCreds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagerServiceServer is the server API for FileManagerService service.
// All implementations must embed UnimplementedFileManagerServiceServer
// for forward compatibility.
type FileManagerServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	UploadFileByChunks(grpc.ClientStreamingServer[FileChunk, UploadStatus]) error
	DownloadFile(*DownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error
	UploadFile(grpc.ClientStreamingServer[FileChunk, UploadStatus]) error
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	ListUserFiles(context.Context, *emptypb.Empty) (*ListUserFileResponse, error)
	SaveCredentials(context.Context, *SaveCredentialsRequest) (*SaveCredentialsResponse, error)
	GetAllCreds(context.Context, *emptypb.Empty) (*AllCredsResponse, error)
	mustEmbedUnimplementedFileManagerServiceServer()
}

// UnimplementedFileManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileManagerServiceServer struct{}

func (UnimplementedFileManagerServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedFileManagerServiceServer) UploadFileByChunks(grpc.ClientStreamingServer[FileChunk, UploadStatus]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFileByChunks not implemented")
}
func (UnimplementedFileManagerServiceServer) DownloadFile(*DownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileManagerServiceServer) UploadFile(grpc.ClientStreamingServer[FileChunk, UploadStatus]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileManagerServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFileManagerServiceServer) ListUserFiles(context.Context, *emptypb.Empty) (*ListUserFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserFiles not implemented")
}
func (UnimplementedFileManagerServiceServer) SaveCredentials(context.Context, *SaveCredentialsRequest) (*SaveCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCredentials not implemented")
}
func (UnimplementedFileManagerServiceServer) GetAllCreds(context.Context, *emptypb.Empty) (*AllCredsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCreds not implemented")
}
func (UnimplementedFileManagerServiceServer) mustEmbedUnimplementedFileManagerServiceServer() {}
func (UnimplementedFileManagerServiceServer) testEmbeddedByValue()                            {}

// UnsafeFileManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagerServiceServer will
// result in compilation errors.
type UnsafeFileManagerServiceServer interface {
	mustEmbedUnimplementedFileManagerServiceServer()
}

func RegisterFileManagerServiceServer(s grpc.ServiceRegistrar, srv FileManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileManagerService_ServiceDesc, srv)
}

func _FileManagerService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_UploadFileByChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileManagerServiceServer).UploadFileByChunks(&grpc.GenericServerStream[FileChunk, UploadStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileManagerService_UploadFileByChunksServer = grpc.ClientStreamingServer[FileChunk, UploadStatus]

func _FileManagerService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileManagerServiceServer).DownloadFile(m, &grpc.GenericServerStream[DownloadRequest, DownloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileManagerService_DownloadFileServer = grpc.ServerStreamingServer[DownloadResponse]

func _FileManagerService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileManagerServiceServer).UploadFile(&grpc.GenericServerStream[FileChunk, UploadStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileManagerService_UploadFileServer = grpc.ClientStreamingServer[FileChunk, UploadStatus]

func _FileManagerService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_ListUserFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).ListUserFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_ListUserFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).ListUserFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_SaveCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).SaveCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_SaveCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).SaveCredentials(ctx, req.(*SaveCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_GetAllCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).GetAllCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_GetAllCreds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).GetAllCreds(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManagerService_ServiceDesc is the grpc.ServiceDesc for FileManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileManagerService",
	HandlerType: (*FileManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _FileManagerService_Login_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _FileManagerService_CreateUser_Handler,
		},
		{
			MethodName: "ListUserFiles",
			Handler:    _FileManagerService_ListUserFiles_Handler,
		},
		{
			MethodName: "SaveCredentials",
			Handler:    _FileManagerService_SaveCredentials_Handler,
		},
		{
			MethodName: "GetAllCreds",
			Handler:    _FileManagerService_GetAllCreds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFileByChunks",
			Handler:       _FileManagerService_UploadFileByChunks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileManagerService_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _FileManagerService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
